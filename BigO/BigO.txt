Big O notation

* How code slows as data grows
1. Describes the performance of an algorithm as the amount of data increases
2. Machine independent (# of steps to completion)
3. Ignore smller operations O(n + 1) => O(n)
ex) n = amount of data (it's a variable like x)

O(1) = constant time
       - random access of an element in an array
       - inserting at the beginning of linkedlist

O(log n) = logarithmic time
           - binary search

O(n) = linear time
       - looping through elements in an array
       - searching through a linkedlist

O(n log n) = quasilinear time
             - quick sort
             - merge sort
             - heap sort
             
O(n^2) = quadratic time
         - insertion sort
         - selection sort
         - bubble sort
O(n!) = factorial time
        - Traveling Salesman Problem